import get from 'lodash.get';
import fetch from 'node-fetch';

const buildPlaylistVideos = (data) => {
  const items = get(data, "contents.twoColumnBrowseResultsRenderer.tabs[0].tabRenderer.content.sectionListRenderer.contents[0].itemSectionRenderer.contents[0].playlistVideoListRenderer.contents");
  return items.reduce((acc, item) => {
    if (typeof item.playlistVideoRenderer === "undefined")
      return acc;
    const body = item.playlistVideoRenderer;
    const id = body.videoId;
    return [
      ...acc,
      {
        id,
        name: get(body, "title.runs[0].text", ""),
        url: `https://youtube.com/watch?v=${id}`
      }
    ];
  }, []);
};
const buildPlaylist = (data) => {
  const maybeTitle = get(data, "metadata.playlistMetadataRenderer.title", "");
  return {
    title: maybeTitle.trim(),
    playlist: buildPlaylistVideos(data)
  };
};

const isObject = (obj) => obj && typeof obj === "object";
function mergeDeep(...objects) {
  return objects.reduce((prev, obj) => {
    const keys = Object.keys(obj);
    for (let i = 0, len = keys.length; i < len; i++) {
      const key = keys[i];
      const pVal = prev[key];
      const oVal = obj[key];
      if (Array.isArray(pVal) && Array.isArray(oVal)) {
        prev[key] = [...pVal, ...oVal];
      } else if (isObject(pVal) && isObject(oVal)) {
        prev[key] = mergeDeep(pVal, oVal);
      } else {
        prev[key] = oVal;
      }
    }
    return prev;
  }, {});
}

const getPlaylistUrl = (id) => `https://www.youtube.com/playlist?list=${id}`;
const FETCH_DEFAULTS = {
  headers: {
    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.67 Safari/537.36"
  }
};
async function getPlaylistHtml(playlistId, fetchOptions) {
  const options = mergeDeep(FETCH_DEFAULTS, fetchOptions || {});
  const response = await fetch(getPlaylistUrl(playlistId), options);
  const html = await response.text();
  if (!response.ok) {
    throw new Error(`Unable to fetch playlist with ID: ${playlistId}`);
  }
  return html;
}

const tryParseJson = (str) => {
  let data = null;
  try {
    data = JSON.parse(str);
  } catch (e) {
    console.log(e);
  }
  return data;
};
function parseInitialData(html) {
  if (!html || !html.length)
    return null;
  var match = html.match(/(?:window\[(?:"|')ytInitialData(?:"|')\]|var ytInitialData) = ([^\n]+?); ?(?:<\/script>|\n)/);
  if (!match || !match[1])
    return null;
  return tryParseJson(match[1]) || null;
}

async function scrapePlaylist(playlistId, fetchOptions) {
  const html = await getPlaylistHtml(playlistId, fetchOptions);
  const data = parseInitialData(html);
  if (data === null) {
    throw new Error("Unable to parse ytInitialData");
  }
  try {
    return buildPlaylist(data);
  } catch (error) {
    throw new Error("Unable to parse body");
  }
}

export { scrapePlaylist };
//# sourceMappingURL=youtube-playlist-scraper.mjs.map
